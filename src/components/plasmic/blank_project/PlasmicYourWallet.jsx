// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: VLILcNzR_Q
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: UzcYFC-NJii/component
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component
import Timeline from "../../Timeline"; // plasmic-import: 0RHyvgnmPT/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicYourWallet.module.css"; // plasmic-import: VLILcNzR_Q/css
import WizardSvgrepoComsvg2Icon from "./icons/PlasmicIcon__WizardSvgrepoComsvg2"; // plasmic-import: ppcK-LiUA7/icon
import screenShot20220619At70250PMpngCyEWdgYSm from "./images/screenShot20220619At70250PMpng.png"; // plasmic-import: cyEWdgYSm/picture

export const PlasmicYourWallet__VariantProps = new Array();

export const PlasmicYourWallet__ArgProps = new Array();

export const defaultYourWallet__Args = {};

function PlasmicYourWallet__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultYourWallet__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__zoRiA)}>
              <div className={classNames(projectcss.all, sty.freeBox___9Aw5Q)}>
                <div className={classNames(projectcss.all, sty.freeBox__tVhb)}>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Enter Your Tezos Wallet"}
                  </h1>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5T3Ie
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "Acctez uses Tezos for access and payments. \n\nPlease Sync your wallet or enter your organization's Tezos wallet address.\n\nIf you don't have a Tezos wallet, you can set one up very easily through "
                        }
                      </React.Fragment>
                      <a
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link
                        )}
                        href={"https://wallet.kukai.app/"}
                      >
                        {"Kukai Wallet"}
                      </a>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qf7Js
                    )}
                  >
                    {
                      "Instead of Syncing - you can enter your Organization's Tezos Wallet Address here."
                    }
                  </div>

                  <TextInput
                    data-plasmic-name={"walletAddress"}
                    data-plasmic-override={overrides.walletAddress}
                    className={classNames("__wab_instance", sty.walletAddress)}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__khRc)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qjhTq)}
                    />
                  ) : null}

                  <Button
                    data-plasmic-name={"backButton"}
                    data-plasmic-override={overrides.backButton}
                    className={classNames("__wab_instance", sty.backButton)}
                  >
                    {"Back"}
                  </Button>

                  <Button
                    data-plasmic-name={"nextButton"}
                    data-plasmic-override={overrides.nextButton}
                    className={classNames("__wab_instance", sty.nextButton)}
                  >
                    {"Next"}
                  </Button>
                </p.Stack>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__fRpF)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__mVS)}>
                  <WizardSvgrepoComsvg2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__heiKw
                    )}
                  >
                    {"AccTez Wizard"}
                  </div>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: screenShot20220619At70250PMpngCyEWdgYSm,
                      fullWidth: 627,
                      fullHeight: 419,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}

              <Timeline
                data-plasmic-name={"timeline"}
                data-plasmic-override={overrides.timeline}
                className={classNames("__wab_instance", sty.timeline)}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "h1",
    "link",
    "walletAddress",
    "backButton",
    "nextButton",
    "svg",
    "img",
    "timeline"
  ],

  columns: [
    "columns",
    "h1",
    "link",
    "walletAddress",
    "backButton",
    "nextButton",
    "svg",
    "img",
    "timeline"
  ],

  h1: ["h1"],
  link: ["link"],
  walletAddress: ["walletAddress"],
  backButton: ["backButton"],
  nextButton: ["nextButton"],
  svg: ["svg"],
  img: ["img"],
  timeline: ["timeline"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicYourWallet__ArgProps,
      internalVariantPropNames: PlasmicYourWallet__VariantProps
    });

    return PlasmicYourWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicYourWallet";
  } else {
    func.displayName = `PlasmicYourWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicYourWallet = Object.assign(
  // Top-level PlasmicYourWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    walletAddress: makeNodeComponent("walletAddress"),
    backButton: makeNodeComponent("backButton"),
    nextButton: makeNodeComponent("nextButton"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    timeline: makeNodeComponent("timeline"),
    // Metadata about props expected for PlasmicYourWallet
    internalVariantProps: PlasmicYourWallet__VariantProps,
    internalArgProps: PlasmicYourWallet__ArgProps
  }
);

export default PlasmicYourWallet;
/* prettier-ignore-end */
