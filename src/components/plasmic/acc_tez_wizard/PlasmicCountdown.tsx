// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: m27RQcS0kv
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_acc_tez_wizard.module.css'; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from './PlasmicCountdown.module.css'; // plasmic-import: m27RQcS0kv/css

export type PlasmicCountdown__VariantMembers = {};

export type PlasmicCountdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicCountdown__VariantsArgs;
export const PlasmicCountdown__VariantProps = new Array<VariantPropType>();

export type PlasmicCountdown__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCountdown__ArgsType;
export const PlasmicCountdown__ArgProps = new Array<ArgPropType>('children');

export type PlasmicCountdown__OverridesType = {
  root?: p.Flex<'div'>;
  text?: p.Flex<'div'>;
  remainTime?: p.Flex<'div'>;
};

export interface DefaultCountdownProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultCountdown__Args: Partial<PlasmicCountdown__ArgsType> = {};

function PlasmicCountdown__RenderFunc(props: {
  variants: PlasmicCountdown__VariantsArgs;
  args: PlasmicCountdown__ArgsType;
  overrides: PlasmicCountdown__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultCountdown__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {true ? (
        <div
          data-plasmic-name={'text'}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {'Time Remaining'}
        </div>
      ) : null}

      <div
        data-plasmic-name={'remainTime'}
        data-plasmic-override={overrides.remainTime}
        className={classNames(projectcss.all, sty.remainTime)}
      >
        {p.renderPlasmicSlot({
          defaultContents: '10:13:31',
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'text', 'remainTime'],
  text: ['text'],
  remainTime: ['remainTime']
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  text: 'div';
  remainTime: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCountdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCountdown__VariantsArgs;
    args?: PlasmicCountdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCountdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCountdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCountdown__ArgProps,
      internalVariantPropNames: PlasmicCountdown__VariantProps
    });

    return PlasmicCountdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicCountdown';
  } else {
    func.displayName = `PlasmicCountdown.${nodeName}`;
  }
  return func;
}

export const PlasmicCountdown = Object.assign(
  // Top-level PlasmicCountdown renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent('text'),
    remainTime: makeNodeComponent('remainTime'),

    // Metadata about props expected for PlasmicCountdown
    internalVariantProps: PlasmicCountdown__VariantProps,
    internalArgProps: PlasmicCountdown__ArgProps
  }
);

export default PlasmicCountdown;
/* prettier-ignore-end */
