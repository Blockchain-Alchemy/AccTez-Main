// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: 0RHyvgnmPT
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_acc_tez_wizard.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicTimeline.module.css"; // plasmic-import: 0RHyvgnmPT/css

import WizardSvgrepoComsvg2Icon from "./icons/PlasmicIcon__WizardSvgrepoComsvg2"; // plasmic-import: ppcK-LiUA7/icon
import screenShot20220619At70250PMpngCyEWdgYSm from "./images/screenShot20220619At70250PMpng.png"; // plasmic-import: cyEWdgYSm/picture

export type PlasmicTimeline__VariantMembers = {};

export type PlasmicTimeline__VariantsArgs = {};
type VariantPropType = keyof PlasmicTimeline__VariantsArgs;
export const PlasmicTimeline__VariantProps = new Array<VariantPropType>();

export type PlasmicTimeline__ArgsType = {
  timeline?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTimeline__ArgsType;
export const PlasmicTimeline__ArgProps = new Array<ArgPropType>("timeline");

export type PlasmicTimeline__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  timeline?: p.Flex<"div">;
};

export interface DefaultTimelineProps {
  timeline?: React.ReactNode;
  className?: string;
}

export const defaultTimeline__Args: Partial<PlasmicTimeline__ArgsType> = {};

function PlasmicTimeline__RenderFunc(props: {
  variants: PlasmicTimeline__VariantsArgs;
  args: PlasmicTimeline__ArgsType;
  overrides: PlasmicTimeline__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultTimeline__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <WizardSvgrepoComsvg2Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"AccTez Wizard"}
      </div>

      {true ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"auto" as const}
          loading={"lazy" as const}
          src={{
            src: screenShot20220619At70250PMpngCyEWdgYSm,
            fullWidth: 627,
            fullHeight: 419,
            aspectRatio: undefined
          }}
        />
      ) : null}

      <div
        data-plasmic-name={"timeline"}
        data-plasmic-override={overrides.timeline}
        className={classNames(projectcss.all, sty.timeline)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.timeline
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "text", "img", "timeline"],
  svg: ["svg"],
  text: ["text"],
  img: ["img"],
  timeline: ["timeline"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  text: "div";
  img: typeof p.PlasmicImg;
  timeline: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTimeline__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTimeline__VariantsArgs;
    args?: PlasmicTimeline__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTimeline__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTimeline__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTimeline__ArgProps,
      internalVariantPropNames: PlasmicTimeline__VariantProps
    });

    return PlasmicTimeline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTimeline";
  } else {
    func.displayName = `PlasmicTimeline.${nodeName}`;
  }
  return func;
}

export const PlasmicTimeline = Object.assign(
  // Top-level PlasmicTimeline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),
    timeline: makeNodeComponent("timeline"),

    // Metadata about props expected for PlasmicTimeline
    internalVariantProps: PlasmicTimeline__VariantProps,
    internalArgProps: PlasmicTimeline__ArgProps
  }
);

export default PlasmicTimeline;
/* prettier-ignore-end */
