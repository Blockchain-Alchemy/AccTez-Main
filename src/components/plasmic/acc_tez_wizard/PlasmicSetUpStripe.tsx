// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: UDeAWj7UYyA
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: UzcYFC-NJii/component
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component
import Timeline from "../../Timeline"; // plasmic-import: 0RHyvgnmPT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_acc_tez_wizard.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicSetUpStripe.module.css"; // plasmic-import: UDeAWj7UYyA/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: M1v116-IU5V/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: gYo0rjvqId9/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XoAtNs3eY9L/icon
import WizardSvgrepoComsvg2Icon from "./icons/PlasmicIcon__WizardSvgrepoComsvg2"; // plasmic-import: ppcK-LiUA7/icon
import screenShot20220619At70250PMpngCyEWdgYSm from "./images/screenShot20220619At70250PMpng.png"; // plasmic-import: cyEWdgYSm/picture

export type PlasmicSetUpStripe__VariantMembers = {};

export type PlasmicSetUpStripe__VariantsArgs = {};
type VariantPropType = keyof PlasmicSetUpStripe__VariantsArgs;
export const PlasmicSetUpStripe__VariantProps = new Array<VariantPropType>();

export type PlasmicSetUpStripe__ArgsType = {};
type ArgPropType = keyof PlasmicSetUpStripe__ArgsType;
export const PlasmicSetUpStripe__ArgProps = new Array<ArgPropType>();

export type PlasmicSetUpStripe__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  link?: p.Flex<"a">;
  stripeKeyText?: p.Flex<typeof TextInput>;
  skipButton?: p.Flex<typeof Button>;
  backButton?: p.Flex<typeof Button>;
  nextButton?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  img?: p.Flex<typeof p.PlasmicImg>;
  timeline?: p.Flex<typeof Timeline>;
};

export interface DefaultSetUpStripeProps {
  className?: string;
}

export const defaultSetUpStripe__Args: Partial<PlasmicSetUpStripe__ArgsType> =
  {};

function PlasmicSetUpStripe__RenderFunc(props: {
  variants: PlasmicSetUpStripe__VariantsArgs;
  args: PlasmicSetUpStripe__ArgsType;
  overrides: PlasmicSetUpStripe__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSetUpStripe__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__axvrP)}>
              <div className={classNames(projectcss.all, sty.freeBox__cPkYg)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___88Hwr)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Set Up Stripe"}
                  </h1>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2QSq
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "Acctez allows your users to purchase passes using their credit card via Stripe. \n\nYou will need to enter you Stripe API Key so that the funds are sent to your account. \n\nFor help getting your Stripe API key, "
                        }
                      </React.Fragment>
                      <a
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link
                        )}
                        href={"https://stripe.com/docs/keys" as const}
                      >
                        {"this guide"}
                      </a>
                      <React.Fragment>
                        {
                          " will help you.\n\nYou may skip this step if you want to accept payment in Tezos.\n"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jqH0Z
                    )}
                  >
                    {"Please Enter your Stripe API Key here:"}
                  </div>

                  <TextInput
                    data-plasmic-name={"stripeKeyText"}
                    data-plasmic-override={overrides.stripeKeyText}
                    className={classNames("__wab_instance", sty.stripeKeyText)}
                    placeholder={"Your Stripe Public Key" as const}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lczIr)}
                >
                  <Button
                    data-plasmic-name={"skipButton"}
                    data-plasmic-override={overrides.skipButton}
                    className={classNames("__wab_instance", sty.skipButton)}
                    color={"link" as const}
                  >
                    {"Skip"}
                  </Button>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___71Q2H)}
                  />

                  <Button
                    data-plasmic-name={"backButton"}
                    data-plasmic-override={overrides.backButton}
                    className={classNames("__wab_instance", sty.backButton)}
                  >
                    {"Back"}
                  </Button>

                  <Button
                    data-plasmic-name={"nextButton"}
                    data-plasmic-override={overrides.nextButton}
                    className={classNames("__wab_instance", sty.nextButton)}
                  >
                    {"Next"}
                  </Button>
                </p.Stack>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__tthY)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__l3PZc)}>
                  <WizardSvgrepoComsvg2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xKlCk
                    )}
                  >
                    {"AccTez Wizard"}
                  </div>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: screenShot20220619At70250PMpngCyEWdgYSm,
                      fullWidth: 627,
                      fullHeight: 419,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}

              <Timeline
                data-plasmic-name={"timeline"}
                data-plasmic-override={overrides.timeline}
                className={classNames("__wab_instance", sty.timeline)}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "h1",
    "link",
    "stripeKeyText",
    "skipButton",
    "backButton",
    "nextButton",
    "svg",
    "img",
    "timeline"
  ],
  columns: [
    "columns",
    "h1",
    "link",
    "stripeKeyText",
    "skipButton",
    "backButton",
    "nextButton",
    "svg",
    "img",
    "timeline"
  ],
  h1: ["h1"],
  link: ["link"],
  stripeKeyText: ["stripeKeyText"],
  skipButton: ["skipButton"],
  backButton: ["backButton"],
  nextButton: ["nextButton"],
  svg: ["svg"],
  img: ["img"],
  timeline: ["timeline"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  h1: "h1";
  link: "a";
  stripeKeyText: typeof TextInput;
  skipButton: typeof Button;
  backButton: typeof Button;
  nextButton: typeof Button;
  svg: "svg";
  img: typeof p.PlasmicImg;
  timeline: typeof Timeline;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSetUpStripe__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSetUpStripe__VariantsArgs;
    args?: PlasmicSetUpStripe__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSetUpStripe__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSetUpStripe__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSetUpStripe__ArgProps,
      internalVariantPropNames: PlasmicSetUpStripe__VariantProps
    });

    return PlasmicSetUpStripe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSetUpStripe";
  } else {
    func.displayName = `PlasmicSetUpStripe.${nodeName}`;
  }
  return func;
}

export const PlasmicSetUpStripe = Object.assign(
  // Top-level PlasmicSetUpStripe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    stripeKeyText: makeNodeComponent("stripeKeyText"),
    skipButton: makeNodeComponent("skipButton"),
    backButton: makeNodeComponent("backButton"),
    nextButton: makeNodeComponent("nextButton"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    timeline: makeNodeComponent("timeline"),

    // Metadata about props expected for PlasmicSetUpStripe
    internalVariantProps: PlasmicSetUpStripe__VariantProps,
    internalArgProps: PlasmicSetUpStripe__ArgProps
  }
);

export default PlasmicSetUpStripe;
/* prettier-ignore-end */
