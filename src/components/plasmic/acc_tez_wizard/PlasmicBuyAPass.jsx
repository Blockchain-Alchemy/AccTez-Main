// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: afAqDb_LEdS
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component
import Checkbox from "../../Checkbox"; // plasmic-import: NK-xeF1iGEb/component
import { useScreenVariants as useScreenVariantsvuY9FrfZklWci } from "../blank_project/PlasmicGlobalVariant__Screen"; // plasmic-import: vuY9frfZKLWci/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicBuyAPass.module.css"; // plasmic-import: afAqDb_LEdS/css

export const PlasmicBuyAPass__VariantProps = new Array();

export const PlasmicBuyAPass__ArgProps = new Array();

export const defaultBuyAPass__Args = {};

function PlasmicBuyAPass__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBuyAPass__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvuY9FrfZklWci()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames(projectcss.all, sty.menu)}
          >
            <h1
              data-plasmic-name={"acctez"}
              data-plasmic-override={overrides.acctez}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.acctez
              )}
            >
              {"AccTez "}
            </h1>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bDycv
                )}
              >
                {"Access Control with Tezos"}
              </div>
            ) : null}

            <Button
              className={classNames("__wab_instance", sty.button__agwY1)}
              color={"blue"}
              shape={"rounded"}
            >
              {"Sync"}
            </Button>
          </div>

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__r0Ors)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qHnPr
                )}
              >
                {"Checkout"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rOuBg
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "You are ready to purchase a pass and access the content. \n\nYour pass is linked to your Tezos wallet. If you don't have a Tezos wallet you can get one easily. Here are some options we recommend:\n\n"
                    }
                  </React.Fragment>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__w97AB
                    )}
                    href={"https://wallet.kukai.app/"}
                  >
                    {"Kukai"}
                  </a>
                  <React.Fragment>
                    {
                      " is a very easy wallet for beginners - social login let's you create a wallet with just your Google, FB or Twitter login.\n"
                    }
                  </React.Fragment>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__sGxo0
                    )}
                    href={"https://wallet.kukai.app/"}
                  >
                    {"Create Kukai Wallet "}
                  </a>
                  <React.Fragment>
                    {
                      "\n\nYour Tezos wallet will store your pass. \n\nFor your convenience, we offer the option to pay for your pass using a credit card through stripe.  \n"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__eeJlx)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mI64V
                )}
              >
                {"Your Order"}
              </div>

              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                className={classNames("__wab_instance", sty.checkbox)}
                defaultChecked={true}
                isDisabled={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dIgmn
                  )}
                >
                  {"Special Event Pass"}
                </div>
              </Checkbox>

              <p.Stack
                as={"div"}
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__xfpKh)}
                  color={"blue"}
                  shape={"rounded"}
                >
                  {"Purchase with Tezos"}
                </Button>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o5Lmy
                  )}
                >
                  {"or"}
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button___43NbU)}
                  color={"blue"}
                  shape={"rounded"}
                >
                  {"Purchase with Credit Card w/ Stripe"}
                </Button>
              </p.Stack>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "menu", "acctez", "columns", "checkbox", "freeBox"],
  menu: ["menu", "acctez"],
  acctez: ["acctez"],
  columns: ["columns", "checkbox", "freeBox"],
  checkbox: ["checkbox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBuyAPass__ArgProps,
      internalVariantPropNames: PlasmicBuyAPass__VariantProps
    });

    return PlasmicBuyAPass__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuyAPass";
  } else {
    func.displayName = `PlasmicBuyAPass.${nodeName}`;
  }
  return func;
}

export const PlasmicBuyAPass = Object.assign(
  // Top-level PlasmicBuyAPass renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menu: makeNodeComponent("menu"),
    acctez: makeNodeComponent("acctez"),
    columns: makeNodeComponent("columns"),
    checkbox: makeNodeComponent("checkbox"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicBuyAPass
    internalVariantProps: PlasmicBuyAPass__VariantProps,
    internalArgProps: PlasmicBuyAPass__ArgProps
  }
);

export default PlasmicBuyAPass;
/* prettier-ignore-end */
