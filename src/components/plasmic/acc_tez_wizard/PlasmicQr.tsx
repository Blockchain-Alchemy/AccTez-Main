// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: P38_qtF-It
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_acc_tez_wizard.module.css'; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from './PlasmicQr.module.css'; // plasmic-import: P38_qtF-It/css

import framepngSUnsZggv0 from './images/framepng.png'; // plasmic-import: SUnsZGGV0/picture

export type PlasmicQr__VariantMembers = {};

export type PlasmicQr__VariantsArgs = {};
type VariantPropType = keyof PlasmicQr__VariantsArgs;
export const PlasmicQr__VariantProps = new Array<VariantPropType>();

export type PlasmicQr__ArgsType = {};
type ArgPropType = keyof PlasmicQr__ArgsType;
export const PlasmicQr__ArgProps = new Array<ArgPropType>();

export type PlasmicQr__OverridesType = {
  root?: p.Flex<'div'>;
  qrCode?: p.Flex<'div'>;
  img?: p.Flex<typeof p.PlasmicImg>;
  text?: p.Flex<'div'>;
};

export interface DefaultQrProps {
  className?: string;
}

export const defaultQr__Args: Partial<PlasmicQr__ArgsType> = {};

function PlasmicQr__RenderFunc(props: {
  variants: PlasmicQr__VariantsArgs;
  args: PlasmicQr__ArgsType;
  overrides: PlasmicQr__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultQr__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={'qrCode'}
            data-plasmic-override={overrides.qrCode}
            className={classNames(projectcss.all, sty.qrCode)}
          >
            <p.PlasmicImg
              data-plasmic-name={'img'}
              data-plasmic-override={overrides.img}
              alt={''}
              className={classNames(sty.img)}
              displayHeight={'auto' as const}
              displayMaxHeight={'none' as const}
              displayMaxWidth={'100%' as const}
              displayMinHeight={'0' as const}
              displayMinWidth={'0' as const}
              displayWidth={'auto' as const}
              loading={'lazy' as const}
              src={{
                src: framepngSUnsZggv0,
                fullWidth: 300,
                fullHeight: 300,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={'text'}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                'Look at this QR code with \nyour iPhone Camera\nTo add Ticket to \nyour Apple Wallet'
              }
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'qrCode', 'img', 'text'],
  qrCode: ['qrCode', 'img', 'text'],
  img: ['img'],
  text: ['text']
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  qrCode: 'div';
  img: typeof p.PlasmicImg;
  text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQr__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQr__VariantsArgs;
    args?: PlasmicQr__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQr__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQr__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicQr__ArgProps,
      internalVariantPropNames: PlasmicQr__VariantProps
    });

    return PlasmicQr__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicQr';
  } else {
    func.displayName = `PlasmicQr.${nodeName}`;
  }
  return func;
}

export const PlasmicQr = Object.assign(
  // Top-level PlasmicQr renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    qrCode: makeNodeComponent('qrCode'),
    img: makeNodeComponent('img'),
    text: makeNodeComponent('text'),

    // Metadata about props expected for PlasmicQr
    internalVariantProps: PlasmicQr__VariantProps,
    internalArgProps: PlasmicQr__ArgProps
  }
);

export default PlasmicQr;
/* prettier-ignore-end */
