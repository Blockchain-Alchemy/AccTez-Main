// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: 0RHyvgnmPT
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicTimeline.module.css"; // plasmic-import: 0RHyvgnmPT/css
import WizardSvgrepoComsvg2Icon from "../blank_project/icons/PlasmicIcon__WizardSvgrepoComsvg2"; // plasmic-import: ppcK-LiUA7/icon
import screenShot20220619At70250PMpngCyEWdgYSm from "../blank_project/images/screenShot20220619At70250PMpng.png"; // plasmic-import: cyEWdgYSm/picture

export const PlasmicTimeline__VariantProps = new Array();

export const PlasmicTimeline__ArgProps = new Array("timeline");

export const defaultTimeline__Args = {};

function PlasmicTimeline__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultTimeline__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <WizardSvgrepoComsvg2Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"AccTez Wizard"}
      </div>

      {true ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: screenShot20220619At70250PMpngCyEWdgYSm,
            fullWidth: 627,
            fullHeight: 419,
            aspectRatio: undefined
          }}
        />
      ) : null}

      <div
        data-plasmic-name={"timeline"}
        data-plasmic-override={overrides.timeline}
        className={classNames(projectcss.all, sty.timeline)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.timeline
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "text", "img", "timeline"],
  svg: ["svg"],
  text: ["text"],
  img: ["img"],
  timeline: ["timeline"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTimeline__ArgProps,
      internalVariantPropNames: PlasmicTimeline__VariantProps
    });

    return PlasmicTimeline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTimeline";
  } else {
    func.displayName = `PlasmicTimeline.${nodeName}`;
  }
  return func;
}

export const PlasmicTimeline = Object.assign(
  // Top-level PlasmicTimeline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),
    timeline: makeNodeComponent("timeline"),
    // Metadata about props expected for PlasmicTimeline
    internalVariantProps: PlasmicTimeline__VariantProps,
    internalArgProps: PlasmicTimeline__ArgProps
  }
);

export default PlasmicTimeline;
/* prettier-ignore-end */
