// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: buB64hVhqri
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from '@plasmicapp/react-web';
import Button from '../../Button'; // plasmic-import: UCG438gq_ly/component
import Menu from '../../Menu'; // plasmic-import: Mbanvkt3Am/component
import Checkbox from '../../Checkbox'; // plasmic-import: NK-xeF1iGEb/component

import { useScreenVariants as useScreenVariantsvuY9FrfZklWci } from './PlasmicGlobalVariant__Screen'; // plasmic-import: vuY9frfZKLWci/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_acc_tez_wizard.module.css'; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from './PlasmicAccess.module.css'; // plasmic-import: buB64hVhqri/css

import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: gYo0rjvqId9/icon
import IconIcon from './icons/PlasmicIcon__Icon'; // plasmic-import: XoAtNs3eY9L/icon

export type PlasmicAccess__VariantMembers = {};

export type PlasmicAccess__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccess__VariantsArgs;
export const PlasmicAccess__VariantProps = new Array<VariantPropType>();

export type PlasmicAccess__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAccess__ArgsType;
export const PlasmicAccess__ArgProps = new Array<ArgPropType>('children');

export type PlasmicAccess__OverridesType = {
  root?: p.Flex<'div'>;
  acctez?: p.Flex<'h1'>;
  button?: p.Flex<typeof Button>;
  columns?: p.Flex<'div'>;
  ownedSpecialPass?: p.Flex<typeof Checkbox>;
  ownedDayPass?: p.Flex<typeof Checkbox>;
  ownedWeeklyPass?: p.Flex<typeof Checkbox>;
  ownedYearlyPass?: p.Flex<typeof Checkbox>;
  accessContentButton?: p.Flex<typeof Button>;
  addTicketToAppleWallet?: p.Flex<typeof Button>;
  dayPassButton?: p.Flex<typeof Button>;
  weeklyPassButton?: p.Flex<typeof Button>;
  yearlyPassButton?: p.Flex<typeof Button>;
  specialPassButton?: p.Flex<typeof Button>;
  restrictedContent?: p.Flex<'div'>;
};

export interface DefaultAccessProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultAccess__Args: Partial<PlasmicAccess__ArgsType> = {};

function PlasmicAccess__RenderFunc(props: {
  variants: PlasmicAccess__VariantsArgs;
  args: PlasmicAccess__ArgsType;
  overrides: PlasmicAccess__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAccess__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvuY9FrfZklWci()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__wsMbr)}>
              <h1
                data-plasmic-name={'acctez'}
                data-plasmic-override={overrides.acctez}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.acctez
                )}
              >
                {'AccTez '}
              </h1>

              {(
                hasVariant(globalVariants, 'screen', 'mobileOnly') ? true : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Vp2T
                  )}
                >
                  {'Access Control with Tezos'}
                </div>
              ) : null}

              <Button
                data-plasmic-name={'button'}
                data-plasmic-override={overrides.button}
                className={classNames('__wab_instance', sty.button)}
                color={'blue' as const}
                shape={'rounded' as const}
              >
                {'Sync'}
              </Button>
            </div>
          ) : null}

          <Menu className={classNames('__wab_instance', sty.menu__tJpqf)} />

          <div
            data-plasmic-name={'columns'}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <p.Stack
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.column___9SOat)}
            >
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wMxe1
                  )}
                >
                  {'Buy a Pass'}
                </div>
              ) : null}
            </p.Stack>

            {true ? (
              <p.Stack
                as={'div'}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__yeUjN)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bus9Q
                  )}
                >
                  {'Your Status'}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__rQWl)}>
                  <Checkbox
                    data-plasmic-name={'ownedSpecialPass'}
                    data-plasmic-override={overrides.ownedSpecialPass}
                    className={classNames(
                      '__wab_instance',
                      sty.ownedSpecialPass
                    )}
                    isDisabled={true}
                  >
                    {'You Own Special Event Pass'}
                  </Checkbox>

                  <Checkbox
                    data-plasmic-name={'ownedDayPass'}
                    data-plasmic-override={overrides.ownedDayPass}
                    className={classNames('__wab_instance', sty.ownedDayPass)}
                    isDisabled={true}
                  >
                    {'You Own Day Pass'}
                  </Checkbox>

                  <Checkbox
                    data-plasmic-name={'ownedWeeklyPass'}
                    data-plasmic-override={overrides.ownedWeeklyPass}
                    className={classNames(
                      '__wab_instance',
                      sty.ownedWeeklyPass
                    )}
                    isDisabled={true}
                  >
                    {'You Own Weekly Pass'}
                  </Checkbox>

                  <Checkbox
                    data-plasmic-name={'ownedYearlyPass'}
                    data-plasmic-override={overrides.ownedYearlyPass}
                    className={classNames(
                      '__wab_instance',
                      sty.ownedYearlyPass
                    )}
                    isDisabled={true}
                  >
                    {'You Own Yearly Pass'}
                  </Checkbox>
                </div>

                <Button
                  data-plasmic-name={'accessContentButton'}
                  data-plasmic-override={overrides.accessContentButton}
                  className={classNames(
                    '__wab_instance',
                    sty.accessContentButton
                  )}
                  color={'blue' as const}
                  shape={'rounded' as const}
                >
                  {'Access Content'}
                </Button>

                <Button
                  data-plasmic-name={'addTicketToAppleWallet'}
                  data-plasmic-override={overrides.addTicketToAppleWallet}
                  className={classNames(
                    '__wab_instance',
                    sty.addTicketToAppleWallet
                  )}
                  color={'blue' as const}
                  shape={'rounded' as const}
                >
                  {'Add Ticket to Apple Wallet'}
                </Button>
              </p.Stack>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___0R23S)}>
            <p.Stack
              as={'div'}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dSaZt)}
            >
              <Button
                data-plasmic-name={'dayPassButton'}
                data-plasmic-override={overrides.dayPassButton}
                className={classNames('__wab_instance', sty.dayPassButton)}
                color={'blue' as const}
                shape={'rounded' as const}
              >
                {'Day Pass'}
              </Button>

              <Button
                data-plasmic-name={'weeklyPassButton'}
                data-plasmic-override={overrides.weeklyPassButton}
                className={classNames('__wab_instance', sty.weeklyPassButton)}
                color={'blue' as const}
                shape={'rounded' as const}
              >
                {'Week Pass'}
              </Button>

              <Button
                data-plasmic-name={'yearlyPassButton'}
                data-plasmic-override={overrides.yearlyPassButton}
                className={classNames('__wab_instance', sty.yearlyPassButton)}
                color={'blue' as const}
                shape={'rounded' as const}
              >
                {'Yearly Pass'}
              </Button>

              <Button
                data-plasmic-name={'specialPassButton'}
                data-plasmic-override={overrides.specialPassButton}
                className={classNames('__wab_instance', sty.specialPassButton)}
                color={'blue' as const}
                shape={'rounded' as const}
              >
                {'Special Event Pass'}
              </Button>
            </p.Stack>

            <div
              data-plasmic-name={'restrictedContent'}
              data-plasmic-override={overrides.restrictedContent}
              className={classNames(projectcss.all, sty.restrictedContent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.children
              })}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'acctez',
    'button',
    'columns',
    'ownedSpecialPass',
    'ownedDayPass',
    'ownedWeeklyPass',
    'ownedYearlyPass',
    'accessContentButton',
    'addTicketToAppleWallet',
    'dayPassButton',
    'weeklyPassButton',
    'yearlyPassButton',
    'specialPassButton',
    'restrictedContent'
  ],
  acctez: ['acctez'],
  button: ['button'],
  columns: [
    'columns',
    'ownedSpecialPass',
    'ownedDayPass',
    'ownedWeeklyPass',
    'ownedYearlyPass',
    'accessContentButton',
    'addTicketToAppleWallet'
  ],
  ownedSpecialPass: ['ownedSpecialPass'],
  ownedDayPass: ['ownedDayPass'],
  ownedWeeklyPass: ['ownedWeeklyPass'],
  ownedYearlyPass: ['ownedYearlyPass'],
  accessContentButton: ['accessContentButton'],
  addTicketToAppleWallet: ['addTicketToAppleWallet'],
  dayPassButton: ['dayPassButton'],
  weeklyPassButton: ['weeklyPassButton'],
  yearlyPassButton: ['yearlyPassButton'],
  specialPassButton: ['specialPassButton'],
  restrictedContent: ['restrictedContent']
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  acctez: 'h1';
  button: typeof Button;
  columns: 'div';
  ownedSpecialPass: typeof Checkbox;
  ownedDayPass: typeof Checkbox;
  ownedWeeklyPass: typeof Checkbox;
  ownedYearlyPass: typeof Checkbox;
  accessContentButton: typeof Button;
  addTicketToAppleWallet: typeof Button;
  dayPassButton: typeof Button;
  weeklyPassButton: typeof Button;
  yearlyPassButton: typeof Button;
  specialPassButton: typeof Button;
  restrictedContent: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccess__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccess__VariantsArgs;
    args?: PlasmicAccess__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccess__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccess__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccess__ArgProps,
      internalVariantPropNames: PlasmicAccess__VariantProps
    });

    return PlasmicAccess__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicAccess';
  } else {
    func.displayName = `PlasmicAccess.${nodeName}`;
  }
  return func;
}

export const PlasmicAccess = Object.assign(
  // Top-level PlasmicAccess renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    acctez: makeNodeComponent('acctez'),
    button: makeNodeComponent('button'),
    columns: makeNodeComponent('columns'),
    ownedSpecialPass: makeNodeComponent('ownedSpecialPass'),
    ownedDayPass: makeNodeComponent('ownedDayPass'),
    ownedWeeklyPass: makeNodeComponent('ownedWeeklyPass'),
    ownedYearlyPass: makeNodeComponent('ownedYearlyPass'),
    accessContentButton: makeNodeComponent('accessContentButton'),
    addTicketToAppleWallet: makeNodeComponent('addTicketToAppleWallet'),
    dayPassButton: makeNodeComponent('dayPassButton'),
    weeklyPassButton: makeNodeComponent('weeklyPassButton'),
    yearlyPassButton: makeNodeComponent('yearlyPassButton'),
    specialPassButton: makeNodeComponent('specialPassButton'),
    restrictedContent: makeNodeComponent('restrictedContent'),

    // Metadata about props expected for PlasmicAccess
    internalVariantProps: PlasmicAccess__VariantProps,
    internalArgProps: PlasmicAccess__ArgProps
  }
);

export default PlasmicAccess;
/* prettier-ignore-end */
