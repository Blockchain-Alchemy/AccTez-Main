// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: RhhJfeaiI6H
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TitleText from "../../TitleText"; // plasmic-import: JUWhA5Wcld/component
import TextInput from "../../TextInput"; // plasmic-import: UzcYFC-NJii/component
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component
import Timeline from "../../Timeline"; // plasmic-import: 0RHyvgnmPT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_acc_tez_wizard.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicDesignTicket.module.css"; // plasmic-import: RhhJfeaiI6H/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: M1v116-IU5V/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: gYo0rjvqId9/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XoAtNs3eY9L/icon
import image29Wv2XxCk from "./images/image2.png"; // plasmic-import: 9WV2_XXCk/picture
import imageT35Ygcjt from "./images/image.png"; // plasmic-import: t35-ygcjt/picture

export type PlasmicDesignTicket__VariantMembers = {};

export type PlasmicDesignTicket__VariantsArgs = {};
type VariantPropType = keyof PlasmicDesignTicket__VariantsArgs;
export const PlasmicDesignTicket__VariantProps = new Array<VariantPropType>();

export type PlasmicDesignTicket__ArgsType = {
  timeline?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDesignTicket__ArgsType;
export const PlasmicDesignTicket__ArgProps = new Array<ArgPropType>("timeline");

export type PlasmicDesignTicket__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
  titleInput?: p.Flex<typeof TitleText>;
  textInput?: p.Flex<typeof TextInput>;
  ticketBg?: p.Flex<"div">;
  timeline?: p.Flex<typeof Timeline>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultDesignTicketProps {
  timeline?: React.ReactNode;
  className?: string;
}

export const defaultDesignTicket__Args: Partial<PlasmicDesignTicket__ArgsType> =
  {};

function PlasmicDesignTicket__RenderFunc(props: {
  variants: PlasmicDesignTicket__VariantsArgs;
  args: PlasmicDesignTicket__ArgsType;
  overrides: PlasmicDesignTicket__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDesignTicket__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__gxNs)}>
              <div className={classNames(projectcss.all, sty.freeBox__dcm79)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7KdNw)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Design Ticket"}
                  </h1>

                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {
                      "Here you can design the ticket your users will have delivered to their Apple Wallets."
                    }
                  </div>

                  <TitleText
                    data-plasmic-name={"titleInput"}
                    data-plasmic-override={overrides.titleInput}
                    className={classNames("__wab_instance", sty.titleInput)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__wRixf)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___3JRaY)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"241px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: image29Wv2XxCk,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__tWvKw)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: imageT35Ygcjt,
                      fullWidth: 230,
                      fullHeight: 58,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    data-plasmic-name={"ticketBg"}
                    data-plasmic-override={overrides.ticketBg}
                    className={classNames(projectcss.all, sty.ticketBg)}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rb5Qt)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__nyJnp)}
                    color={"link" as const}
                  >
                    {"Skip"}
                  </Button>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__dVpJ2)}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__dINfx)}
                  >
                    {"Back"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__sxo1R)}
                  >
                    {"Next"}
                  </Button>
                </p.Stack>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__l6OTo)}>
              <Timeline
                data-plasmic-name={"timeline"}
                data-plasmic-override={overrides.timeline}
                className={classNames("__wab_instance", sty.timeline)}
                timeline={p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.timeline
                })}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "h1",
    "text",
    "titleInput",
    "textInput",
    "textbox",
    "ticketBg",
    "timeline"
  ],
  columns: [
    "columns",
    "h1",
    "text",
    "titleInput",
    "textInput",
    "textbox",
    "ticketBg",
    "timeline"
  ],
  h1: ["h1"],
  text: ["text"],
  titleInput: ["titleInput"],
  textInput: ["textInput", "textbox"],
  ticketBg: ["ticketBg"],
  timeline: ["timeline"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  h1: "h1";
  text: "div";
  titleInput: typeof TitleText;
  textInput: typeof TextInput;
  ticketBg: "div";
  timeline: typeof Timeline;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesignTicket__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesignTicket__VariantsArgs;
    args?: PlasmicDesignTicket__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDesignTicket__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDesignTicket__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDesignTicket__ArgProps,
      internalVariantPropNames: PlasmicDesignTicket__VariantProps
    });

    return PlasmicDesignTicket__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesignTicket";
  } else {
    func.displayName = `PlasmicDesignTicket.${nodeName}`;
  }
  return func;
}

export const PlasmicDesignTicket = Object.assign(
  // Top-level PlasmicDesignTicket renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    titleInput: makeNodeComponent("titleInput"),
    textInput: makeNodeComponent("textInput"),
    ticketBg: makeNodeComponent("ticketBg"),
    timeline: makeNodeComponent("timeline"),

    // Metadata about props expected for PlasmicDesignTicket
    internalVariantProps: PlasmicDesignTicket__VariantProps,
    internalArgProps: PlasmicDesignTicket__ArgProps
  }
);

export default PlasmicDesignTicket;
/* prettier-ignore-end */
