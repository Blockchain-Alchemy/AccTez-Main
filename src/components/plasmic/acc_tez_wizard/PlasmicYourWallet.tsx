// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: VLILcNzR_Q
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Menu from "../../Menu"; // plasmic-import: Mbanvkt3Am/component
import TextInput from "../../TextInput"; // plasmic-import: UzcYFC-NJii/component
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component
import Timeline from "../../Timeline"; // plasmic-import: 0RHyvgnmPT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_acc_tez_wizard.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicYourWallet.module.css"; // plasmic-import: VLILcNzR_Q/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: M1v116-IU5V/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: gYo0rjvqId9/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XoAtNs3eY9L/icon
import WizardSvgrepoComsvg2Icon from "./icons/PlasmicIcon__WizardSvgrepoComsvg2"; // plasmic-import: ppcK-LiUA7/icon
import screenShot20220619At70250PMpngCyEWdgYSm from "./images/screenShot20220619At70250PMpng.png"; // plasmic-import: cyEWdgYSm/picture

export type PlasmicYourWallet__VariantMembers = {};

export type PlasmicYourWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicYourWallet__VariantsArgs;
export const PlasmicYourWallet__VariantProps = new Array<VariantPropType>();

export type PlasmicYourWallet__ArgsType = {};
type ArgPropType = keyof PlasmicYourWallet__ArgsType;
export const PlasmicYourWallet__ArgProps = new Array<ArgPropType>();

export type PlasmicYourWallet__OverridesType = {
  root?: p.Flex<"div">;
  menu?: p.Flex<typeof Menu>;
  columns?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  link?: p.Flex<"a">;
  walletAddress?: p.Flex<typeof TextInput>;
  backButton?: p.Flex<typeof Button>;
  nextButton?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  img?: p.Flex<typeof p.PlasmicImg>;
  timeline?: p.Flex<typeof Timeline>;
};

export interface DefaultYourWalletProps {
  className?: string;
}

export const defaultYourWallet__Args: Partial<PlasmicYourWallet__ArgsType> = {};

function PlasmicYourWallet__RenderFunc(props: {
  variants: PlasmicYourWallet__VariantsArgs;
  args: PlasmicYourWallet__ArgsType;
  overrides: PlasmicYourWallet__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultYourWallet__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Menu
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames("__wab_instance", sty.menu)}
          />

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__zoRiA)}>
              <div className={classNames(projectcss.all, sty.freeBox___9Aw5Q)}>
                <div className={classNames(projectcss.all, sty.freeBox__tVhb)}>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Enter Your Tezos Wallet"}
                  </h1>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5T3Ie
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "Acctez uses Tezos for access and payments. \n\nPlease Sync your wallet or enter your organization's Tezos wallet address.\n\nIf you don't have a Tezos wallet, you can set one up very easily through "
                        }
                      </React.Fragment>
                      <a
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link
                        )}
                        href={"https://wallet.kukai.app/" as const}
                      >
                        {"Kukai Wallet"}
                      </a>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qf7Js
                    )}
                  >
                    {
                      "Instead of Syncing - you can enter your Organization's Tezos Wallet Address here."
                    }
                  </div>

                  <TextInput
                    data-plasmic-name={"walletAddress"}
                    data-plasmic-override={overrides.walletAddress}
                    className={classNames("__wab_instance", sty.walletAddress)}
                    placeholder={"Your Wallet Address" as const}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__khRc)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qjhTq)}
                    />
                  ) : null}

                  <Button
                    data-plasmic-name={"backButton"}
                    data-plasmic-override={overrides.backButton}
                    className={classNames("__wab_instance", sty.backButton)}
                  >
                    {"Back"}
                  </Button>

                  <Button
                    data-plasmic-name={"nextButton"}
                    data-plasmic-override={overrides.nextButton}
                    className={classNames("__wab_instance", sty.nextButton)}
                  >
                    {"Next"}
                  </Button>
                </p.Stack>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__fRpF)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__mVS)}>
                  <WizardSvgrepoComsvg2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__heiKw
                    )}
                  >
                    {"AccTez Wizard"}
                  </div>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: screenShot20220619At70250PMpngCyEWdgYSm,
                      fullWidth: 627,
                      fullHeight: 419,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}

              <Timeline
                data-plasmic-name={"timeline"}
                data-plasmic-override={overrides.timeline}
                className={classNames("__wab_instance", sty.timeline)}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "menu",
    "columns",
    "h1",
    "link",
    "walletAddress",
    "backButton",
    "nextButton",
    "svg",
    "img",
    "timeline"
  ],
  menu: ["menu"],
  columns: [
    "columns",
    "h1",
    "link",
    "walletAddress",
    "backButton",
    "nextButton",
    "svg",
    "img",
    "timeline"
  ],
  h1: ["h1"],
  link: ["link"],
  walletAddress: ["walletAddress"],
  backButton: ["backButton"],
  nextButton: ["nextButton"],
  svg: ["svg"],
  img: ["img"],
  timeline: ["timeline"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  menu: typeof Menu;
  columns: "div";
  h1: "h1";
  link: "a";
  walletAddress: typeof TextInput;
  backButton: typeof Button;
  nextButton: typeof Button;
  svg: "svg";
  img: typeof p.PlasmicImg;
  timeline: typeof Timeline;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicYourWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicYourWallet__VariantsArgs;
    args?: PlasmicYourWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicYourWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicYourWallet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicYourWallet__ArgProps,
      internalVariantPropNames: PlasmicYourWallet__VariantProps
    });

    return PlasmicYourWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicYourWallet";
  } else {
    func.displayName = `PlasmicYourWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicYourWallet = Object.assign(
  // Top-level PlasmicYourWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menu: makeNodeComponent("menu"),
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    walletAddress: makeNodeComponent("walletAddress"),
    backButton: makeNodeComponent("backButton"),
    nextButton: makeNodeComponent("nextButton"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    timeline: makeNodeComponent("timeline"),

    // Metadata about props expected for PlasmicYourWallet
    internalVariantProps: PlasmicYourWallet__VariantProps,
    internalArgProps: PlasmicYourWallet__ArgProps
  }
);

export default PlasmicYourWallet;
/* prettier-ignore-end */
