// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: afAqDb_LEdS
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Menu from "../../Menu"; // plasmic-import: Mbanvkt3Am/component
import Checkbox from "../../Checkbox"; // plasmic-import: NK-xeF1iGEb/component
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_acc_tez_wizard.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicBuyAPass.module.css"; // plasmic-import: afAqDb_LEdS/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: gYo0rjvqId9/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XoAtNs3eY9L/icon

export type PlasmicBuyAPass__VariantMembers = {};

export type PlasmicBuyAPass__VariantsArgs = {};
type VariantPropType = keyof PlasmicBuyAPass__VariantsArgs;
export const PlasmicBuyAPass__VariantProps = new Array<VariantPropType>();

export type PlasmicBuyAPass__ArgsType = {};
type ArgPropType = keyof PlasmicBuyAPass__ArgsType;
export const PlasmicBuyAPass__ArgProps = new Array<ArgPropType>();

export type PlasmicBuyAPass__OverridesType = {
  root?: p.Flex<"div">;
  menu?: p.Flex<typeof Menu>;
  columns?: p.Flex<"div">;
  checkbox?: p.Flex<typeof Checkbox>;
  tokenName?: p.Flex<"div">;
  priceTezosText?: p.Flex<"div">;
  priceDollarText?: p.Flex<"div">;
  purchaseWithTezosButton?: p.Flex<typeof Button>;
  purchaseWithStripeButton?: p.Flex<typeof Button>;
};

export interface DefaultBuyAPassProps {
  className?: string;
}

export const defaultBuyAPass__Args: Partial<PlasmicBuyAPass__ArgsType> = {};

function PlasmicBuyAPass__RenderFunc(props: {
  variants: PlasmicBuyAPass__VariantsArgs;
  args: PlasmicBuyAPass__ArgsType;
  overrides: PlasmicBuyAPass__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBuyAPass__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Menu
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames("__wab_instance", sty.menu)}
          />

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__r0Ors)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qHnPr
                )}
              >
                {"Checkout"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rOuBg
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "You are ready to purchase a pass and access the content. \n\nYour pass is linked to your Tezos wallet. If you don't have a Tezos wallet you can get one easily. Here are some options we recommend:\n\n"
                    }
                  </React.Fragment>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__w97AB
                    )}
                    href={"https://wallet.kukai.app/" as const}
                  >
                    {"Kukai"}
                  </a>
                  <React.Fragment>
                    {
                      " is a very easy wallet for beginners - social login let's you create a wallet with just your Google, FB or Twitter login.\n"
                    }
                  </React.Fragment>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__sGxo0
                    )}
                    href={"https://wallet.kukai.app/" as const}
                  >
                    {"Create Kukai Wallet "}
                  </a>
                  <React.Fragment>
                    {
                      "\n\nYour Tezos wallet will store your pass. \n\nFor your convenience, we offer the option to pay for your pass using a credit card through stripe.  \n"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__eeJlx)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mI64V
                )}
              >
                {"Your Order"}
              </div>

              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                className={classNames("__wab_instance", sty.checkbox)}
                defaultChecked={true}
                isDisabled={true}
              >
                <div
                  data-plasmic-name={"tokenName"}
                  data-plasmic-override={overrides.tokenName}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tokenName
                  )}
                >
                  {"Pass Token Name"}
                </div>
              </Checkbox>

              <div className={classNames(projectcss.all, sty.freeBox__a9Io2)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aqhxG
                  )}
                >
                  {"Price"}
                </div>

                <div
                  data-plasmic-name={"priceTezosText"}
                  data-plasmic-override={overrides.priceTezosText}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.priceTezosText
                  )}
                >
                  {"\n0 tez\n"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kpz2
                  )}
                >
                  {"or"}
                </div>

                <div
                  data-plasmic-name={"priceDollarText"}
                  data-plasmic-override={overrides.priceDollarText}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.priceDollarText
                  )}
                >
                  {"\n$0\n"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sl1Dz)}
              >
                <Button
                  data-plasmic-name={"purchaseWithTezosButton"}
                  data-plasmic-override={overrides.purchaseWithTezosButton}
                  className={classNames(
                    "__wab_instance",
                    sty.purchaseWithTezosButton
                  )}
                  color={"blue" as const}
                  shape={"rounded" as const}
                >
                  {"Purchase with Tezos"}
                </Button>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o5Lmy
                  )}
                >
                  {"or"}
                </div>

                <Button
                  data-plasmic-name={"purchaseWithStripeButton"}
                  data-plasmic-override={overrides.purchaseWithStripeButton}
                  className={classNames(
                    "__wab_instance",
                    sty.purchaseWithStripeButton
                  )}
                  color={"blue" as const}
                  shape={"rounded" as const}
                >
                  {"Purchase with Credit Card w/ Stripe"}
                </Button>
              </p.Stack>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "menu",
    "columns",
    "checkbox",
    "tokenName",
    "priceTezosText",
    "priceDollarText",
    "purchaseWithTezosButton",
    "purchaseWithStripeButton"
  ],
  menu: ["menu"],
  columns: [
    "columns",
    "checkbox",
    "tokenName",
    "priceTezosText",
    "priceDollarText",
    "purchaseWithTezosButton",
    "purchaseWithStripeButton"
  ],
  checkbox: ["checkbox", "tokenName"],
  tokenName: ["tokenName"],
  priceTezosText: ["priceTezosText"],
  priceDollarText: ["priceDollarText"],
  purchaseWithTezosButton: ["purchaseWithTezosButton"],
  purchaseWithStripeButton: ["purchaseWithStripeButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  menu: typeof Menu;
  columns: "div";
  checkbox: typeof Checkbox;
  tokenName: "div";
  priceTezosText: "div";
  priceDollarText: "div";
  purchaseWithTezosButton: typeof Button;
  purchaseWithStripeButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBuyAPass__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBuyAPass__VariantsArgs;
    args?: PlasmicBuyAPass__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBuyAPass__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBuyAPass__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBuyAPass__ArgProps,
      internalVariantPropNames: PlasmicBuyAPass__VariantProps
    });

    return PlasmicBuyAPass__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuyAPass";
  } else {
    func.displayName = `PlasmicBuyAPass.${nodeName}`;
  }
  return func;
}

export const PlasmicBuyAPass = Object.assign(
  // Top-level PlasmicBuyAPass renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menu: makeNodeComponent("menu"),
    columns: makeNodeComponent("columns"),
    checkbox: makeNodeComponent("checkbox"),
    tokenName: makeNodeComponent("tokenName"),
    priceTezosText: makeNodeComponent("priceTezosText"),
    priceDollarText: makeNodeComponent("priceDollarText"),
    purchaseWithTezosButton: makeNodeComponent("purchaseWithTezosButton"),
    purchaseWithStripeButton: makeNodeComponent("purchaseWithStripeButton"),

    // Metadata about props expected for PlasmicBuyAPass
    internalVariantProps: PlasmicBuyAPass__VariantProps,
    internalArgProps: PlasmicBuyAPass__ArgProps
  }
);

export default PlasmicBuyAPass;
/* prettier-ignore-end */
