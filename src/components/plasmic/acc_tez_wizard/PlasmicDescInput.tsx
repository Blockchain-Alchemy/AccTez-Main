// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: S-p5LAwNsG
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: UzcYFC-NJii/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_acc_tez_wizard.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicDescInput.module.css"; // plasmic-import: S-p5LAwNsG/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: M1v116-IU5V/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: gYo0rjvqId9/icon

export type PlasmicDescInput__VariantMembers = {};

export type PlasmicDescInput__VariantsArgs = {};
type VariantPropType = keyof PlasmicDescInput__VariantsArgs;
export const PlasmicDescInput__VariantProps = new Array<VariantPropType>();

export type PlasmicDescInput__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDescInput__ArgsType;
export const PlasmicDescInput__ArgProps = new Array<ArgPropType>("children");

export type PlasmicDescInput__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultDescInputProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultDescInput__Args: Partial<PlasmicDescInput__ArgsType> = {};

function PlasmicDescInput__RenderFunc(props: {
  variants: PlasmicDescInput__VariantsArgs;
  args: PlasmicDescInput__ArgsType;
  overrides: PlasmicDescInput__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDescInput__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <TextInput
            className={classNames("__wab_instance", sty.textInput__kXgqs)}
          />
        ),

        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDescInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDescInput__VariantsArgs;
    args?: PlasmicDescInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDescInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDescInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDescInput__ArgProps,
      internalVariantPropNames: PlasmicDescInput__VariantProps
    });

    return PlasmicDescInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDescInput";
  } else {
    func.displayName = `PlasmicDescInput.${nodeName}`;
  }
  return func;
}

export const PlasmicDescInput = Object.assign(
  // Top-level PlasmicDescInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDescInput
    internalVariantProps: PlasmicDescInput__VariantProps,
    internalArgProps: PlasmicDescInput__ArgProps
  }
);

export default PlasmicDescInput;
/* prettier-ignore-end */
