// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 68wGqrWvUbUk9uG76N3xHk
// Component: mI1RRebNRD
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: UCG438gq_ly/component
import Checkbox from "../../Checkbox"; // plasmic-import: NK-xeF1iGEb/component
import { useScreenVariants as useScreenVariantsvuY9FrfZklWci } from "../blank_project/PlasmicGlobalVariant__Screen"; // plasmic-import: vuY9frfZKLWci/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 68wGqrWvUbUk9uG76N3xHk/projectcss
import sty from "./PlasmicMain.module.css"; // plasmic-import: mI1RRebNRD/css

export const PlasmicMain__VariantProps = new Array();

export const PlasmicMain__ArgProps = new Array();

export const defaultMain__Args = {};

function PlasmicMain__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultMain__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvuY9FrfZklWci()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames(projectcss.all, sty.menu)}
          >
            <h1
              data-plasmic-name={"acctez"}
              data-plasmic-override={overrides.acctez}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.acctez
              )}
            >
              {"AccTez "}
            </h1>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gvr97
                )}
              >
                {"Access Control with Tezos"}
              </div>
            ) : null}

            <Button
              className={classNames("__wab_instance", sty.button__rCsHq)}
              color={"blue"}
              shape={"rounded"}
            >
              {"Sync"}
            </Button>
          </div>

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__k0VJh)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3FYu4
                )}
              >
                {"Buy a Pass"}
              </div>

              <Button
                className={classNames("__wab_instance", sty.button__i0ACe)}
                color={"blue"}
                shape={"rounded"}
              >
                {"Special Event Pass"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__nzDri)}
                color={"blue"}
                shape={"rounded"}
              >
                {"Day Pass"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__h3WxU)}
                color={"blue"}
                shape={"rounded"}
              >
                {"Week Pass"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__tFbFt)}
                color={"blue"}
                shape={"rounded"}
              >
                {"Yearly Pass"}
              </Button>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__wLjh4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fYyJ
                )}
              >
                {"Your Status"}
              </div>

              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__q0KSf)}
                isDisabled={true}
              >
                {"You Own Special Event Pass"}
              </Checkbox>

              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__v7Bru)}
                isDisabled={true}
              >
                {"You Own Day Pass"}
              </Checkbox>

              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__cjaZ)}
                isDisabled={true}
              >
                {"You Own Weekly Pass"}
              </Checkbox>

              <Checkbox
                className={classNames("__wab_instance", sty.checkbox__pgZh5)}
                isDisabled={true}
              >
                {"You Own Yearly Pass"}
              </Checkbox>

              <Button
                className={classNames("__wab_instance", sty.button___2PGe4)}
                color={"blue"}
                shape={"rounded"}
              >
                {"Add Ticket to Apple Wallet"}
              </Button>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "menu", "acctez", "columns"],
  menu: ["menu", "acctez"],
  acctez: ["acctez"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMain__ArgProps,
      internalVariantPropNames: PlasmicMain__VariantProps
    });

    return PlasmicMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMain";
  } else {
    func.displayName = `PlasmicMain.${nodeName}`;
  }
  return func;
}

export const PlasmicMain = Object.assign(
  // Top-level PlasmicMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menu: makeNodeComponent("menu"),
    acctez: makeNodeComponent("acctez"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicMain
    internalVariantProps: PlasmicMain__VariantProps,
    internalArgProps: PlasmicMain__ArgProps
  }
);

export default PlasmicMain;
/* prettier-ignore-end */
